# This script asks for a card number and returns whether or not it is 
# valid (using the Luhn algorithm) and the type of card it is.
# Example card numbers (test cards provided by Stripe):
# 4242424242424242	Visa
# 4000056655665556	Visa (debit)
# 5555555555554444	Mastercard
# 2223003122003222	Mastercard (2-series)
# 5200828282828210	Mastercard (debit)
# 5105105105105100	Mastercard (prepaid)
# 378282246310005	American Express
# 371449635398431	American Express
# 6011111111111117	Discover
# 6011000990139424	Discover
# 30569309025904	Diners Club
# 38520000023237	Diners Club
# 3566002020360505	JCB
# 6200000000000005	UnionPay

class CreditCard:
	def char_to_digit(char):
		return char.to_number

	def init(cardNumber):
		# We store the card number as a Text object. This is 
		# due to the fact that card numbers are integers that may be > 17 
		# digits in length. This exceeds the maximum storage size for a 
		# number object in Roo.
		self.cardNumber = cardNumber.to_text

	def company:
		var comp
		var c = self.cardNumber.to_text
		if c.starts_with?(4):
			comp = "Visa"
		or c.starts_with?([50, 67, 58, 63]):
			comp = "Maestro"
		or c.starts_with?([2, 5]):
			comp = "MasterCard"
		or c.starts_with?(37):
			comp = "American Express"
		or c.starts_with?(62):
			comp = "Unionpay"
		or c.starts_with?(6):
			comp = "Discover"
		or c.starts_with?(35):
			comp = "JCB"
		or c.starts_with?(7):
			comp = "Gasoline"
		or c.starts_with?([30, 38]):
			comp = "Diners Club"
		else:
			comp = "Unknown"

		return comp

	def valid?:	
		# Convert the card number text object to an array of digits.
		var digits = self.cardNumber.each_char(self.char_to_digit)

		# Check that the number is of a valid length.
		if digits.length < 13 or digits.length > 19: return False

		# Double the value of alternate digits beginning with the 
		# second digit from the right (the first right-hand digit 
		# is the check digit).
		var sum = 0
		var length = digits.length
		for (var i = 0; i < length; i += 1):
			# Get digits in reverse order.
			var digit = digits[length - i - 1]
			# Every second number multiply with 2.
			if (i % 2 == 1):
				digit *= 2
			sum += digit > 9 ? digit - 9 : digit
		return (sum % 10) == 0

# Ask for a card number from the user. Get it as text.
var cardNumber = input("Enter a card number")

# Make sure that the user entered a value.
assert(not cardNumber.nothing?, "You must enter a number")

# Create a new card instance with this card number.
var card = CreditCard(cardNumber)

# Validate the card number and print the result.
if card.valid?:
	print("Valid " + card.company + " card")
else:
	print("Invalid card number")
