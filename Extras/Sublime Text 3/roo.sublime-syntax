%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Roo
file_extensions:
  - roo
scope: source.roo

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings
    - include: invokable
    - include: ucase_identifiers
    - include: lcase_identifiers

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(and|break|class|def|else|exit|for|if|module|not|or|pass|quit|require|return|self|static|super|var|while|True|False|Nothing)\b'
      scope: keyword.control.roo

  numbers:
    - match: '\b(0[xX]\h(_?\h)*|\d(_?\d)*(\.(?![^[:space:][:digit:]])(_?\d)*)?([eE][-+]?\d(_?\d)*)?|0[bB][01]+|0[oO][01234567]+)\b'
      scope: constant.numeric.roo

  strings:
    - include: double_quoted_string
    - include: single_quoted_string

  double_quoted_string:
    - match: '"'
      scope: punctuation.definition.string.begin.roo
      push:
      - meta_scope: string.quoted.double.roo
      - match: '"'
        scope: punctuation.definition.string.end.roo
        pop: true

  single_quoted_string:
    - match: "'"
      scope: punctuation.definition.string.begin.roo
      push:
      - meta_scope: string.quoted.single.roo
      - match: "'"
        scope: punctuation.definition.string.end.roo
        pop: true

  comments:
    # Comments begin with a '#' and finish at the end of the line.
    - match: '#'
      scope: punctuation.definition.comment.roo
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.hash.roo
        - match: $\n?
          pop: true

  invokable:
    - match: '[A-Za-z_][A-Za-z_0-9]*[!?]?(?=\()'
      scope: entity.name.invokable.roo

  ucase_identifiers:
    - match: '[A-Z_][A-Za-z_0-9]*'
      scope: entity.name.ucase.roo

  lcase_identifiers:
    - match: '[a-z_][A-Za-z_0-9]*'
      scope: entity.name.lcase.roo