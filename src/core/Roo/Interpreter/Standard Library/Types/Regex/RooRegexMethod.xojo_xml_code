<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2018r4" FormatVersion="2" MinIDEVersion="20150400">
<block type="Module" ID="1418604543">
 <ObjName>RooRegexMethod</ObjName>
 <ObjContainerID>30504959</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>Invokable, Stringable</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Arity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2026127359</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Arity() As Variant</SourceLine>
   <SourceLine>// Part of the Invokable interface.</SourceLine>
   <SourceLine>// Return the arity of this method. This is stored in the cached RegexMethods dictionary.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return RooSLCache.RegexMethods.Value(Name)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Invoke</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>12460031</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Invoke(interpreter As RooInterpreter, arguments() As Variant, where As RooToken) As Variant</SourceLine>
   <SourceLine>// Part of the Invokable interface.</SourceLine>
   <SourceLine>// Perform the required method operation on this Regex object.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused interpreter</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Select Case Name</SourceLine>
   <SourceLine>Case "first_match"</SourceLine>
   <SourceLine>Dim result As Variant = DoMatch(arguments, where)</SourceLine>
   <SourceLine>If result IsA RooNothing Then Return result</SourceLine>
   <SourceLine>If result IsA RooArray Then Return RooArray(result).Elements(0)</SourceLine>
   <SourceLine>Case "match"</SourceLine>
   <SourceLine>Return DoMatch(arguments, where)</SourceLine>
   <SourceLine>Case "matches?"</SourceLine>
   <SourceLine>Return DoMatches(arguments, where)</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>interpreter As RooInterpreter, arguments() As Variant, where As RooToken</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>856797183</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringValue() As String</SourceLine>
   <SourceLine>// Part of the Stringable interface.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return "&lt;function " + Name + "&gt;"</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>595849215</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(owner As RooRegex, name As String)</SourceLine>
   <SourceLine>Self.Owner = owner</SourceLine>
   <SourceLine>Self.Name = name</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>owner As RooRegex, name As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DoMatches</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>404127743</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DoMatches(args() As Variant, where As RooToken) As RooBoolean</SourceLine>
   <SourceLine>// Regex.matches?(what as Text) as Boolean.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused where</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Get the string to search.</SourceLine>
   <SourceLine>Dim what As String = Stringable(args(0)).StringValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Run the search query, looking for at least one match.</SourceLine>
   <SourceLine>Dim match As RegExMatch = Owner.Regex.Search(what)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Return whether there is a match or not.</SourceLine>
   <SourceLine>Return New RooBoolean(If(match &lt;&gt; Nil, True, False))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>args() As Variant, where As RooToken</ItemParams>
  <ItemResult>RooBoolean</ItemResult>
 </Method>
 <Method>
  <ItemName>DoMatch</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1938499583</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DoMatch(args() As Variant, where As RooToken) As Variant</SourceLine>
   <SourceLine>// Regex.match(what as Text) as array of RegexMatch objects or Nothing</SourceLine>
   <SourceLine>// Regex.match(what as Text, start as Integer) as array of RegexMatch objects or Nothing</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BreakOnExceptions False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If the optional `start` argument is passed make sure it's a positive integer.</SourceLine>
   <SourceLine>Dim start As Integer = 0</SourceLine>
   <SourceLine>If args.Ubound = 1 Then</SourceLine>
   <SourceLine>Roo.AssertIsPositiveInteger(where, args(1))</SourceLine>
   <SourceLine>start = RooNumber(args(1)).Value</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Get the text to search.</SourceLine>
   <SourceLine>Dim what As String = Stringable(args(0)).StringValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Convert the passed start position into a byte start position.</SourceLine>
   <SourceLine>// The Xojo Regex library requires a byte position which does not always align with </SourceLine>
   <SourceLine>// the character position in multibyte (i.e: UTF-8) strings.</SourceLine>
   <SourceLine>start = what.Left(start).LenB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Do the search.</SourceLine>
   <SourceLine>Dim numCaptureGroups, matchStart As Integer</SourceLine>
   <SourceLine>Dim matchValue As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim m, matches() As RooRegexMatch</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim match As RegExMatch = Owner.Regex.Search(what, start)</SourceLine>
   <SourceLine>Do Until match = Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Create a new Roo RegexMatch object.</SourceLine>
   <SourceLine>matchValue = match.SubExpressionString(0)</SourceLine>
   <SourceLine>matchStart = RooRegex.ZeroBasedPos(match.SubExpressionStartB(0), what)</SourceLine>
   <SourceLine>m = New RooRegexMatch(matchStart, matchValue)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Handle any capture groups.</SourceLine>
   <SourceLine>numCaptureGroups = match.SubExpressionCount - 1</SourceLine>
   <SourceLine>If numCaptureGroups &gt; 0 Then</SourceLine>
   <SourceLine>For i As Integer = 1 To numCaptureGroups</SourceLine>
   <SourceLine>// Create a dictionary to hold the value, start pos and length of this </SourceLine>
   <SourceLine>// capture group's content.</SourceLine>
   <SourceLine>Dim d As Xojo.Core.Dictionary = Roo.CaseSensitiveDictionary</SourceLine>
   <SourceLine>d.Value("start") = RooRegex.ZeroBasedPos(match.SubExpressionStartB(i), what)</SourceLine>
   <SourceLine>d.Value("value") = match.SubExpressionString(i)</SourceLine>
   <SourceLine>d.Value("length") = match.SubExpressionString(i).Len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add this dictionary to this match's array of capture group dictionaries.</SourceLine>
   <SourceLine>// NB: m.Groups(0) = first capture group, m.Groups(1) = 2nd group, etc.</SourceLine>
   <SourceLine>m.Groups.Append(d)</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add this match to our array of matches.</SourceLine>
   <SourceLine>matches.Append(m)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Keep searching the query string.</SourceLine>
   <SourceLine>match = Owner.Regex.Search</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Loop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If there were no matches, return Nothing.</SourceLine>
   <SourceLine>If matches.Ubound &lt; 0 Then Return New RooNothing</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// There was at least one match. Return an array of RegexMatch objects.</SourceLine>
   <SourceLine>Dim a As New RooArray</SourceLine>
   <SourceLine>For i As Integer = 0 To matches.Ubound</SourceLine>
   <SourceLine>a.Elements.Append(matches(i))</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine>Return a</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Exception err As RegExSearchPatternException</SourceLine>
   <SourceLine>Raise New RooRuntimeError(where, "Invalid regular expression (" + err.Message + _</SourceLine>
   <SourceLine>"): " + Owner.Regex.SearchPattern)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>args() As Variant, where As RooToken</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1956503551</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As String</SourceLine>
   <SourceLine>The name of this Regex object method.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Owner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>927533055</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Owner As RooRegex</SourceLine>
   <SourceLine>The RooRegex object that owns this method.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Owner As RooRegex</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
