<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2018r4" FormatVersion="2" MinIDEVersion="20150400">
<block type="Module" ID="1457772543">
 <ObjName>RooArray</ObjName>
 <ObjContainerID>929968127</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>RooInstance</Superclass>
 <Interfaces> RooNativeClass</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1599320063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>Constructor(0)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>481087487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(size As Integer)</SourceLine>
   <SourceLine>Super.Constructor(Nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If size &gt;= 0 Then Redim Elements(size - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>size As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>625369087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(elements() As Variant)</SourceLine>
   <SourceLine>Super.Constructor(Nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Self.Elements = elements</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>elements() As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>700209151</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringValue() As String</SourceLine>
   <SourceLine>// Return a String representation of this array.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Elements.Ubound &lt; 0 Then Return "[]" // Empty array.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim s, value As String</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim d As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>s = "["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For a As Integer = 0 To Elements.Ubound</SourceLine>
   <SourceLine>If a &lt;&gt; 0 Then s = s + ", "</SourceLine>
   <SourceLine>If Elements(a) IsA RooNumber Then</SourceLine>
   <SourceLine>d = RooNumber(Elements(a)).Value</SourceLine>
   <SourceLine>// Format integers and doubles differently.</SourceLine>
   <SourceLine>If Round(d) = d Then // Integer.</SourceLine>
   <SourceLine>i = d</SourceLine>
   <SourceLine>value = Str(i)</SourceLine>
   <SourceLine>Else // Double.</SourceLine>
   <SourceLine>value = Str(d)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Elements(a) IsA RooText Then</SourceLine>
   <SourceLine>value = """" + Stringable(Elements(a)).StringValue + """"</SourceLine>
   <SourceLine>ElseIf Elements(a) IsA Stringable Then</SourceLine>
   <SourceLine>value = Stringable(Elements(a)).StringValue</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>value = "&lt;No text representation&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>s = s + value</SourceLine>
   <SourceLine>Next a</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return s + "]"</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Type</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1465694207</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Type() As String</SourceLine>
   <SourceLine>Return "Array"</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetterWithName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1987106815</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetterWithName(name As RooToken) As Variant</SourceLine>
   <SourceLine>// Return the result of the requested getter operation.</SourceLine>
   <SourceLine>If StrComp(name.Lexeme, "empty?", 0) = 0 Then</SourceLine>
   <SourceLine>// Array.empty? as Integer</SourceLine>
   <SourceLine>Return New RooBoolean(If(Elements.Ubound &lt; 0, True, False))</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "first", 0) = 0 Then</SourceLine>
   <SourceLine>If Elements.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>Return New RooNothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return Elements(0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "length", 0) = 0 Then</SourceLine>
   <SourceLine>// Array.length as Integer</SourceLine>
   <SourceLine>Return New RooNumber(Elements.Ubound + 1)</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "pop!", 0) = 0 Then</SourceLine>
   <SourceLine>// Array.pop! As Object Or Nothing</SourceLine>
   <SourceLine>If Elements.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>Return New RooNothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return Elements.Pop</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "reverse!", 0) = 0 Then</SourceLine>
   <SourceLine>Return DoReverse</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "shuffle!", 0) = 0 Then</SourceLine>
   <SourceLine>Elements.Shuffle</SourceLine>
   <SourceLine>Return Self</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "unique", 0) = 0 Then</SourceLine>
   <SourceLine>Return DoUnique(False)</SourceLine>
   <SourceLine>ElseIf StrComp(name.Lexeme, "unique!", 0) = 0 Then</SourceLine>
   <SourceLine>Return DoUnique(True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As RooToken</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>HasGetterWithName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>487614463</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasGetterWithName(name As String) As Boolean</SourceLine>
   <SourceLine>// Query the global Roo dictionary of Array object getters for the existence of a getter </SourceLine>
   <SourceLine>// with the passed name.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return RooSLCache.ArrayGetters.HasKey(name)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>HasMethodWithName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>389152767</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasMethodWithName(name As String) As Boolean</SourceLine>
   <SourceLine>// Query the global Roo dictionary of Array object methods for the existence of a method </SourceLine>
   <SourceLine>// with the passed name.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return RooSLCache.ArrayMethods.HasKey(name)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>MethodWithName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2025318399</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MethodWithName(name As RooToken) As Invokable</SourceLine>
   <SourceLine>// Return a new instance of an Array object method initialised with the name of the method </SourceLine>
   <SourceLine>// being called. That way, when the returned method is invoked, it will know what operation </SourceLine>
   <SourceLine>// to perform.</SourceLine>
   <SourceLine>Return New RooArrayMethod(Self, name.Lexeme)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As RooToken</ItemParams>
  <ItemResult>Invokable</ItemResult>
 </Method>
 <Method>
  <ItemName>Arity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>664809471</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Arity() As Variant</SourceLine>
   <SourceLine>// Part of the Invokable interface.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New RooRuntimeError(New RooToken, "Cannot invoke an array.")</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Invoke</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1171185663</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Invoke(interpreter As RooInterpreter, arguments() As Variant, where As RooToken) As Variant</SourceLine>
   <SourceLine>// Part of the Invokable interface.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Unused interpreter</SourceLine>
   <SourceLine>#Pragma Unused arguments</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Raise New RooRuntimeError(where, "Cannot invoke an array.")</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>interpreter As RooInterpreter, arguments() As Variant, where As RooToken</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>DoReverse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1726070783</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DoReverse() As RooArray</SourceLine>
   <SourceLine>// Array.reverse! As Array</SourceLine>
   <SourceLine>// Reverse the order of this array's elements and return this array.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i, limit As Integer</SourceLine>
   <SourceLine>Dim tmp() As Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>limit = Elements.Ubound</SourceLine>
   <SourceLine>For i = limit DownTo 0</SourceLine>
   <SourceLine>tmp.Append(elements(i))</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Elements = tmp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Self</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>RooArray</ItemResult>
 </Method>
 <Method>
  <ItemName>DoUnique</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>195074047</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DoUnique(destructive As Boolean) As RooArray</SourceLine>
   <SourceLine>// Array.unique  |  Array.unique!</SourceLine>
   <SourceLine>// Returns an array constructed by removing duplicate values in this array. Can be destructive.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Const ROO_NOTHING = "@*_*_ROONOTHING_*_*"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim encounted As Xojo.Core.Dictionary = Roo.CaseSensitiveDictionary</SourceLine>
   <SourceLine>Dim i, elementUbound As Integer</SourceLine>
   <SourceLine>Dim result() As Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Loop through each element. Every time we encounter an element we haven't seen before we add it</SourceLine>
   <SourceLine>// to the `encounted` dictionary. The key of the dictionary is the object itself, EXCEPT for Text</SourceLine>
   <SourceLine>// objects (where we use the text value), Numbers (we use the numeric value), Boolean objects </SourceLine>
   <SourceLine>// (we use the Boolean value) and Nothing objects (where we use an arbitrary text constant).</SourceLine>
   <SourceLine>// Why do we use the value of some objects and not others? Well, obviously two Numbers with the </SourceLine>
   <SourceLine>// value "2.0" should be treated as the same for the purposes of this function but in reality </SourceLine>
   <SourceLine>// are actually two different objects in the runtime.</SourceLine>
   <SourceLine>elementUbound = elements.Ubound</SourceLine>
   <SourceLine>For i = 0 To elementUbound</SourceLine>
   <SourceLine>If elements(i) IsA RooText Then</SourceLine>
   <SourceLine>If Not encounted.HasKey(RooText(Elements(i)).Value) Then</SourceLine>
   <SourceLine>result.Append(Elements(i))</SourceLine>
   <SourceLine>encounted.Value(RooText(Elements(i)).Value) = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Elements(i) IsA RooNumber Then</SourceLine>
   <SourceLine>If Not encounted.HasKey(RooNumber(Elements(i)).Value) Then</SourceLine>
   <SourceLine>result.Append(Elements(i))</SourceLine>
   <SourceLine>encounted.Value(RooNumber(Elements(i)).Value) = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Elements(i) IsA RooBoolean Then</SourceLine>
   <SourceLine>If Not encounted.HasKey(RooBoolean(Elements(i)).Value) Then</SourceLine>
   <SourceLine>result.Append(Elements(i))</SourceLine>
   <SourceLine>encounted.Value(RooBoolean(Elements(i)).Value) = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Elements(i) IsA RooNothing Then</SourceLine>
   <SourceLine>If Not encounted.HasKey(ROO_NOTHING) Then</SourceLine>
   <SourceLine>result.Append(Elements(i))</SourceLine>
   <SourceLine>encounted.Value(ROO_NOTHING) = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If encounted.HasKey(Elements(i)) = False Then</SourceLine>
   <SourceLine>result.Append(Elements(i))</SourceLine>
   <SourceLine>encounted.Value(Elements(i)) = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Destructive operation?</SourceLine>
   <SourceLine>If destructive Then elements = result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New RooArray(result)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>destructive As Boolean</ItemParams>
  <ItemResult>RooArray</ItemResult>
 </Method>
 <Method>
  <ItemName>Join</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1727457279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Join(separator As String) As RooText</SourceLine>
   <SourceLine>// Internal helper method.</SourceLine>
   <SourceLine>// Returns this array as a text object by joining it's elements together with `separator`.</SourceLine>
   <SourceLine>// Recurses through subarrays.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i, limit As Integer</SourceLine>
   <SourceLine>Dim result As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Elements.Ubound &lt; 0 Then Return New RooText("")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>limit = Elements.Ubound</SourceLine>
   <SourceLine>For i = 0 To limit</SourceLine>
   <SourceLine>If Elements(i) IsA RooArray Then // Recurse.</SourceLine>
   <SourceLine>result = result + RooArray(Elements(i)).Join(separator).Value + If(i = limit, "", separator)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>result = result + Stringable(Elements(i)).StringValue + if(i = limit, "", separator)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New RooText(result)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>separator As String</ItemParams>
  <ItemResult>RooText</ItemResult>
 </Method>
 <Property>
  <ItemName>Elements()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>852529151</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Elements() As Variant</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Elements() As Variant</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
